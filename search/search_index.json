{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pancake Project Pancake is a versatile and easy-to-use toolkit for PHP projects designed to simplify common tasks such as session management, HTTP requests, and configuration parsing. It provides developers with a clean, well-organized API to improve productivity and code quality. This project is proudly maintained by @guibranco . Source code is available on GitHub: Pancake Repository Table of Contents Pancake Project Table of Contents About Pancake Key Features Project Status Getting Started Installation Basic Usage Example Testing Setup for Testing Enabling Xdebug Running Tests Running Tests Without Coverage Running Tests With Coverage Viewing Code Coverage in VSCode Debugging with Xdebug Contributing License About Pancake Pancake is a lightweight PHP toolkit focused on streamlining everyday project requirements. It includes several modules that handle common operations such as session management, HTTP request handling, and parsing TOML configuration files. Pancake's goal is to make these operations more accessible and intuitive, allowing developers to concentrate on building features rather than boilerplate code. Whether working on small projects or large-scale applications, Pancake can help you maintain clean, readable, and maintainable code. Key Features Pancake offers a variety of features to enhance your PHP projects: Color : Utility for managing colors based on text. Database : Interface for managing database connections and queries. GUID v4 : Generate unique GUIDs for your data entities. Health Checks : Monitor the health status of your applications and services. HTTP Requests : Easily send and manage HTTP requests, supporting multiple methods such as GET, POST, PUT, and DELETE. IP Utils : Utility functions for validating, checking ranges, and converting IP addresses in both IPv4 and IPv6 formats. Logger : Robust logging capabilities to track application events and errors. Memory Cache : Implement caching strategies to improve application performance. One Signal : Integrate One Signal for push notifications in your applications. Session Manager : Simplify PHP session handling with methods for setting, getting, and managing session data, including flash messages. ShieldsIo : Create custom badges for your projects using Shields.io. For more detailed documentation on each feature, check out the links above. Project Status Pancake is actively maintained, and new features or bug fixes are added frequently. Below is the current status of the project: Build Status Last Commit Coverage Code Smells LoC Open Issues : Getting Started To get started with Pancake in your project, follow these steps: Installation Install Pancake via Composer: composer require guibranco/pancake Basic Usage Example <?php use GuiBranco\\Pancake\\SessionManager; use GuiBranco\\Pancake\\Request; // Start session SessionManager::start(); SessionManager::set('user', 'john_doe'); // HTTP Request $response = (new Request())->get('https://api.example.com/data'); echo $response->getBody(); For more detailed guides on specific features, please see the Basic Usage Documentation . Testing Setup for Testing To prepare for testing, please ensure you have PHP , Composer , PHPUnit , and Xdebug installed on your system. Also, install VSCode and the Gutter Coverage extension to view code coverage directly in your editor. Enabling Xdebug Install Xdebug if it's not already installed: bash pecl install xdebug Enable Xdebug : Open your PHP configuration file ( php.ini ) and add or modify the following lines: ini [xdebug] zend_extension=xdebug.so xdebug.mode=coverage xdebug.start_with_request=yes Verify Xdebug Installation : Restart your PHP environment and run: bash php -v Confirm that Xdebug is listed in the output. Running Tests Running Tests Without Coverage To execute tests without coverage reports, run: ./vendor/bin/phpunit --configuration tests/phpunit.xml Running Tests With Coverage To generate a coverage report with Xdebug enabled, use: XDEBUG_MODE=coverage ./vendor/bin/phpunit --configuration tests/phpunit.xml --coverage-clover test-reports/cov.xml The coverage report will be saved in test-reports/cov.xml . You can use this file with VSCode to visualize coverage. Viewing Code Coverage in VSCode Install the Gutter Coverage extension in VSCode. In the Gutter Coverage settings, configure it to point to test-reports/cov.xml . After running tests with coverage, open your source files to see coverage indicators for each line. Debugging with Xdebug Set breakpoints in VSCode. Open the Run and Debug panel in VSCode, select Listen for Xdebug , or set up a new configuration if needed. Run your tests from the command line or start a debugging session in VSCode. Contributing We welcome contributions! If you'd like to contribute to Pancake, please check the contributing guide and browse the open issues . License This project is licensed under the MIT License - see the LICENSE file for details.","title":"Pancake Project"},{"location":"#pancake-project","text":"Pancake is a versatile and easy-to-use toolkit for PHP projects designed to simplify common tasks such as session management, HTTP requests, and configuration parsing. It provides developers with a clean, well-organized API to improve productivity and code quality. This project is proudly maintained by @guibranco . Source code is available on GitHub: Pancake Repository","title":"Pancake Project"},{"location":"#table-of-contents","text":"Pancake Project Table of Contents About Pancake Key Features Project Status Getting Started Installation Basic Usage Example Testing Setup for Testing Enabling Xdebug Running Tests Running Tests Without Coverage Running Tests With Coverage Viewing Code Coverage in VSCode Debugging with Xdebug Contributing License","title":"Table of Contents"},{"location":"#about-pancake","text":"Pancake is a lightweight PHP toolkit focused on streamlining everyday project requirements. It includes several modules that handle common operations such as session management, HTTP request handling, and parsing TOML configuration files. Pancake's goal is to make these operations more accessible and intuitive, allowing developers to concentrate on building features rather than boilerplate code. Whether working on small projects or large-scale applications, Pancake can help you maintain clean, readable, and maintainable code.","title":"About Pancake"},{"location":"#key-features","text":"Pancake offers a variety of features to enhance your PHP projects: Color : Utility for managing colors based on text. Database : Interface for managing database connections and queries. GUID v4 : Generate unique GUIDs for your data entities. Health Checks : Monitor the health status of your applications and services. HTTP Requests : Easily send and manage HTTP requests, supporting multiple methods such as GET, POST, PUT, and DELETE. IP Utils : Utility functions for validating, checking ranges, and converting IP addresses in both IPv4 and IPv6 formats. Logger : Robust logging capabilities to track application events and errors. Memory Cache : Implement caching strategies to improve application performance. One Signal : Integrate One Signal for push notifications in your applications. Session Manager : Simplify PHP session handling with methods for setting, getting, and managing session data, including flash messages. ShieldsIo : Create custom badges for your projects using Shields.io. For more detailed documentation on each feature, check out the links above.","title":"Key Features"},{"location":"#project-status","text":"Pancake is actively maintained, and new features or bug fixes are added frequently. Below is the current status of the project: Build Status Last Commit Coverage Code Smells LoC Open Issues :","title":"Project Status"},{"location":"#getting-started","text":"To get started with Pancake in your project, follow these steps:","title":"Getting Started"},{"location":"#installation","text":"Install Pancake via Composer: composer require guibranco/pancake","title":"Installation"},{"location":"#basic-usage-example","text":"<?php use GuiBranco\\Pancake\\SessionManager; use GuiBranco\\Pancake\\Request; // Start session SessionManager::start(); SessionManager::set('user', 'john_doe'); // HTTP Request $response = (new Request())->get('https://api.example.com/data'); echo $response->getBody(); For more detailed guides on specific features, please see the Basic Usage Documentation .","title":"Basic Usage Example"},{"location":"#testing","text":"","title":"Testing"},{"location":"#setup-for-testing","text":"To prepare for testing, please ensure you have PHP , Composer , PHPUnit , and Xdebug installed on your system. Also, install VSCode and the Gutter Coverage extension to view code coverage directly in your editor.","title":"Setup for Testing"},{"location":"#enabling-xdebug","text":"Install Xdebug if it's not already installed: bash pecl install xdebug Enable Xdebug : Open your PHP configuration file ( php.ini ) and add or modify the following lines: ini [xdebug] zend_extension=xdebug.so xdebug.mode=coverage xdebug.start_with_request=yes Verify Xdebug Installation : Restart your PHP environment and run: bash php -v Confirm that Xdebug is listed in the output.","title":"Enabling Xdebug"},{"location":"#running-tests","text":"","title":"Running Tests"},{"location":"#running-tests-without-coverage","text":"To execute tests without coverage reports, run: ./vendor/bin/phpunit --configuration tests/phpunit.xml","title":"Running Tests Without Coverage"},{"location":"#running-tests-with-coverage","text":"To generate a coverage report with Xdebug enabled, use: XDEBUG_MODE=coverage ./vendor/bin/phpunit --configuration tests/phpunit.xml --coverage-clover test-reports/cov.xml The coverage report will be saved in test-reports/cov.xml . You can use this file with VSCode to visualize coverage.","title":"Running Tests With Coverage"},{"location":"#viewing-code-coverage-in-vscode","text":"Install the Gutter Coverage extension in VSCode. In the Gutter Coverage settings, configure it to point to test-reports/cov.xml . After running tests with coverage, open your source files to see coverage indicators for each line.","title":"Viewing Code Coverage in VSCode"},{"location":"#debugging-with-xdebug","text":"Set breakpoints in VSCode. Open the Run and Debug panel in VSCode, select Listen for Xdebug , or set up a new configuration if needed. Run your tests from the command line or start a debugging session in VSCode.","title":"Debugging with Xdebug"},{"location":"#contributing","text":"We welcome contributions! If you'd like to contribute to Pancake, please check the contributing guide and browse the open issues .","title":"Contributing"},{"location":"#license","text":"This project is licensed under the MIT License - see the LICENSE file for details.","title":"License"},{"location":"changelog/","text":"Changelog Version 1.3 [2025-04-23] #351 - Replace real HTTP requests in integration tests with WireMock by @guibranco and gitauto-ai . Version 1.2 [2025-01-18] #308 - Add isSuccessStatusCode and enhance validateStatusCode in Response class by @guibranco . Version 1.1 [2025-01-16] #307 - Add methods getBodyAsJson and getBodyAsArray in Response class by @guibranco . Version 1.0 [2024-12-21] #287 - Add support for curl_multi_init in Request class by @guibranco . Version 0.14 [2024-10-26] #83 - Add Database class by @guibranco . Version 0.13 [2024-10-26] #166 - Add IpUtils class by @GitAuto / @guibranco . Version 0.12 [2024-10-22] #234 - Add Session Manager class by @Humayun-23 . Version 0.11 [2024-10-02] Enhance the Request class with optional data parameter by @guibranco . Version 0.10 [2024-09-23] #84 - Add MemoryCache class by @GitAuto . Version 0.9 [2024-09-19] Enhance ShieldsIo class with cache duration feature by @guibranco . Version 0.8 [2024-07-22] #167 - Add ShieldsIo class by @guibranco . Version 0.7 [2024-07-04] #145 - Add Color class by @gvieiragoulart . Version 0.6 [2024-04-21] #118 - Add Logger class by @guibranco . Version 0.5 [2024-04-21] #119 - Add OneSignal class by @guibranco . Version 0.4 [2024-04-21] #115 - Add GUID (v4) class by @guibranco . Version 0.3 [2024-04-08] #81 - Add Health Checks class by @guibranco . Version 0.2 [2024-03-20] #86 - Add Request class by @guibranco . Version 0.1 [2024-03-18] Create the project's basic structure and pipeline by @guibranco .","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#version-13-2025-04-23","text":"#351 - Replace real HTTP requests in integration tests with WireMock by @guibranco and gitauto-ai .","title":"Version 1.3 [2025-04-23]"},{"location":"changelog/#version-12-2025-01-18","text":"#308 - Add isSuccessStatusCode and enhance validateStatusCode in Response class by @guibranco .","title":"Version 1.2 [2025-01-18]"},{"location":"changelog/#version-11-2025-01-16","text":"#307 - Add methods getBodyAsJson and getBodyAsArray in Response class by @guibranco .","title":"Version 1.1 [2025-01-16]"},{"location":"changelog/#version-10-2024-12-21","text":"#287 - Add support for curl_multi_init in Request class by @guibranco .","title":"Version 1.0 [2024-12-21]"},{"location":"changelog/#version-014-2024-10-26","text":"#83 - Add Database class by @guibranco .","title":"Version 0.14 [2024-10-26]"},{"location":"changelog/#version-013-2024-10-26","text":"#166 - Add IpUtils class by @GitAuto / @guibranco .","title":"Version 0.13 [2024-10-26]"},{"location":"changelog/#version-012-2024-10-22","text":"#234 - Add Session Manager class by @Humayun-23 .","title":"Version 0.12 [2024-10-22]"},{"location":"changelog/#version-011-2024-10-02","text":"Enhance the Request class with optional data parameter by @guibranco .","title":"Version 0.11 [2024-10-02]"},{"location":"changelog/#version-010-2024-09-23","text":"#84 - Add MemoryCache class by @GitAuto .","title":"Version 0.10 [2024-09-23]"},{"location":"changelog/#version-09-2024-09-19","text":"Enhance ShieldsIo class with cache duration feature by @guibranco .","title":"Version 0.9 [2024-09-19]"},{"location":"changelog/#version-08-2024-07-22","text":"#167 - Add ShieldsIo class by @guibranco .","title":"Version 0.8 [2024-07-22]"},{"location":"changelog/#version-07-2024-07-04","text":"#145 - Add Color class by @gvieiragoulart .","title":"Version 0.7 [2024-07-04]"},{"location":"changelog/#version-06-2024-04-21","text":"#118 - Add Logger class by @guibranco .","title":"Version 0.6 [2024-04-21]"},{"location":"changelog/#version-05-2024-04-21","text":"#119 - Add OneSignal class by @guibranco .","title":"Version 0.5 [2024-04-21]"},{"location":"changelog/#version-04-2024-04-21","text":"#115 - Add GUID (v4) class by @guibranco .","title":"Version 0.4 [2024-04-21]"},{"location":"changelog/#version-03-2024-04-08","text":"#81 - Add Health Checks class by @guibranco .","title":"Version 0.3 [2024-04-08]"},{"location":"changelog/#version-02-2024-03-20","text":"#86 - Add Request class by @guibranco .","title":"Version 0.2 [2024-03-20]"},{"location":"changelog/#version-01-2024-03-18","text":"Create the project's basic structure and pipeline by @guibranco .","title":"Version 0.1 [2024-03-18]"},{"location":"contributing/","text":"Contributing Refer to CONTRIBUTING.md to learn how to contribute to this project! Contributors Guilherme Branco Stracini Gabriel Goulart Haraprasad Mondal Humayun Bots dependabot[bot] github-actions[bot] gitauto-ai[bot] deepsource-autofix[bot] penify-dev[bot] Snyk Bot","title":"Contributing"},{"location":"contributing/#contributing","text":"Refer to CONTRIBUTING.md to learn how to contribute to this project!","title":"Contributing"},{"location":"contributing/#contributors","text":"Guilherme Branco Stracini Gabriel Goulart Haraprasad Mondal Humayun","title":"Contributors"},{"location":"contributing/#bots","text":"dependabot[bot] github-actions[bot] gitauto-ai[bot] deepsource-autofix[bot] penify-dev[bot] Snyk Bot","title":"Bots"},{"location":"installation/","text":"Installation About The Pancake project is a set of libraries for basic PHP projects with API and/or worker/service. Github Releases Download the latest zip file from the Release page. Packagist package repository Package Version Downloads pancake Composer (manual): Pancake composer require guibranco/pancake","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#about","text":"The Pancake project is a set of libraries for basic PHP projects with API and/or worker/service.","title":"About"},{"location":"installation/#github-releases","text":"Download the latest zip file from the Release page.","title":"Github Releases"},{"location":"installation/#packagist-package-repository","text":"Package Version Downloads pancake","title":"Packagist package repository"},{"location":"installation/#composer-manual","text":"Pancake composer require guibranco/pancake","title":"Composer (manual):"},{"location":"license/","text":"MIT License Copyright (c) 2024 Guilherme Branco Stracini Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\") to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"user-guide/basic-usage/","text":"Basic usage This document provides a quick introduction to the GuiBranco\\Pancake toolkit. It includes links to each feature's documentation and a basic example of how to use the toolkit effectively. The main namespace is GuiBranco\\Pancake . Features Color : Utility for managing colors based on text. Database : Interface for managing database connections and queries. GUID v4 : Generate unique GUIDs for your data entities. Health Checks : Monitor the health status of your applications and services. HTTP Requests : Easily send and manage HTTP requests, supporting multiple methods such as GET, POST, PUT, and DELETE. IP Utils : Utility functions for validating, checking ranges, and converting IP addresses in both IPv4 and IPv6 formats. Logger : Robust logging capabilities to track application events and errors. Memory Cache : Implement caching strategies to improve application performance. One Signal : Integrate One Signal for push notifications in your applications. Session Manager : Simplify PHP session handling with methods for setting, getting, and managing session data, including flash messages. ShieldsIo : Create custom badges for your projects using Shields.io. Introduction The GuiBranco\\Pancake toolkit is designed to simplify common operations in PHP applications, such as session management, handling HTTP requests, and parsing TOML files. This toolkit provides a set of utility classes with a simple API to help developers focus on building their applications without worrying about these core tasks. Basic Usage Example Here is a simple example demonstrating how you can use the GuiBranco\\Pancake toolkit in a real-world PHP application: <?php require 'vendor/autoload.php'; // Autoloading using Composer use GuiBranco\\Pancake\\SessionManager; use GuiBranco\\Pancake\\Request; use GuiBranco\\Pancake\\Database; use GuiBranco\\Pancake\\IpUtils; // Session Management Example SessionManager::start(); SessionManager::set('username', 'john_doe'); echo \"Session value for username: \" . SessionManager::get('username'); // Flash message SessionManager::flash('success', 'Your changes were saved!'); echo \"Flash message: \" . SessionManager::getFlash('success'); // HTTP Request Example $request = new Request(); $response = $request->get('https://api.example.com/data'); echo \"API Response: \" . $response->getBody(); // Database Example try { // Load configuration from environment or config file $db = new Database( getenv('DB_HOST'), getenv('DB_NAME'), getenv('DB_USER'), getenv('DB_PASS') ); // Transaction example $db->beginTransaction(); // Insert example $db->prepare(\"INSERT INTO users (name, email) VALUES (:name, :email)\"); $db->bind(':name', 'John Doe'); $db->bind(':email', 'johndoe@example.com'); $db->execute(); $userId = $db->lastInsertId(); echo \"Last inserted ID: \" . $userId; // Fetch single record $db->prepare(\"SELECT * FROM users WHERE id = :id\"); $db->bind(':id', 1); $user = $db->fetch(); echo \"User: \" . json_encode($user, JSON_PRETTY_PRINT); // Fetch all records $db->prepare(\"SELECT * FROM users\"); $users = $db->fetchAll(); echo \"All users: \" . json_encode($users, JSON_PRETTY_PRINT); $db->commit(); } catch (DatabaseException $e) { if ($db->inTransaction()) { $db->rollBack(); } echo \"Database error: \" . $e->getMessage(); } finally { // Ensure the connection is closed $db = null; } // IP Utils Example $ip = '192.168.1.10'; $cidr = '192.168.1.0/24'; if (IpUtils::isValidIPv4($ip)) { echo \"$ip is a valid IPv4 address.\"; } if (IpUtils::isIPv4InRange($ip, $cidr)) { echo \"$ip is within the range $cidr.\"; } $ipLong = IpUtils::ipToLong($ip); echo \"The long integer representation of $ip is $ipLong.\"; // Output: // 192.168.1.10 is a valid IPv4 address. // 192.168.1.10 is within the range 192.168.1.0/24. // The long integer representation of 192.168.1.10 is 3232235786.","title":"Basic usage"},{"location":"user-guide/basic-usage/#basic-usage","text":"This document provides a quick introduction to the GuiBranco\\Pancake toolkit. It includes links to each feature's documentation and a basic example of how to use the toolkit effectively. The main namespace is GuiBranco\\Pancake .","title":"Basic usage"},{"location":"user-guide/basic-usage/#features","text":"Color : Utility for managing colors based on text. Database : Interface for managing database connections and queries. GUID v4 : Generate unique GUIDs for your data entities. Health Checks : Monitor the health status of your applications and services. HTTP Requests : Easily send and manage HTTP requests, supporting multiple methods such as GET, POST, PUT, and DELETE. IP Utils : Utility functions for validating, checking ranges, and converting IP addresses in both IPv4 and IPv6 formats. Logger : Robust logging capabilities to track application events and errors. Memory Cache : Implement caching strategies to improve application performance. One Signal : Integrate One Signal for push notifications in your applications. Session Manager : Simplify PHP session handling with methods for setting, getting, and managing session data, including flash messages. ShieldsIo : Create custom badges for your projects using Shields.io.","title":"Features"},{"location":"user-guide/basic-usage/#introduction","text":"The GuiBranco\\Pancake toolkit is designed to simplify common operations in PHP applications, such as session management, handling HTTP requests, and parsing TOML files. This toolkit provides a set of utility classes with a simple API to help developers focus on building their applications without worrying about these core tasks.","title":"Introduction"},{"location":"user-guide/basic-usage/#basic-usage-example","text":"Here is a simple example demonstrating how you can use the GuiBranco\\Pancake toolkit in a real-world PHP application: <?php require 'vendor/autoload.php'; // Autoloading using Composer use GuiBranco\\Pancake\\SessionManager; use GuiBranco\\Pancake\\Request; use GuiBranco\\Pancake\\Database; use GuiBranco\\Pancake\\IpUtils; // Session Management Example SessionManager::start(); SessionManager::set('username', 'john_doe'); echo \"Session value for username: \" . SessionManager::get('username'); // Flash message SessionManager::flash('success', 'Your changes were saved!'); echo \"Flash message: \" . SessionManager::getFlash('success'); // HTTP Request Example $request = new Request(); $response = $request->get('https://api.example.com/data'); echo \"API Response: \" . $response->getBody(); // Database Example try { // Load configuration from environment or config file $db = new Database( getenv('DB_HOST'), getenv('DB_NAME'), getenv('DB_USER'), getenv('DB_PASS') ); // Transaction example $db->beginTransaction(); // Insert example $db->prepare(\"INSERT INTO users (name, email) VALUES (:name, :email)\"); $db->bind(':name', 'John Doe'); $db->bind(':email', 'johndoe@example.com'); $db->execute(); $userId = $db->lastInsertId(); echo \"Last inserted ID: \" . $userId; // Fetch single record $db->prepare(\"SELECT * FROM users WHERE id = :id\"); $db->bind(':id', 1); $user = $db->fetch(); echo \"User: \" . json_encode($user, JSON_PRETTY_PRINT); // Fetch all records $db->prepare(\"SELECT * FROM users\"); $users = $db->fetchAll(); echo \"All users: \" . json_encode($users, JSON_PRETTY_PRINT); $db->commit(); } catch (DatabaseException $e) { if ($db->inTransaction()) { $db->rollBack(); } echo \"Database error: \" . $e->getMessage(); } finally { // Ensure the connection is closed $db = null; } // IP Utils Example $ip = '192.168.1.10'; $cidr = '192.168.1.0/24'; if (IpUtils::isValidIPv4($ip)) { echo \"$ip is a valid IPv4 address.\"; } if (IpUtils::isIPv4InRange($ip, $cidr)) { echo \"$ip is within the range $cidr.\"; } $ipLong = IpUtils::ipToLong($ip); echo \"The long integer representation of $ip is $ipLong.\"; // Output: // 192.168.1.10 is a valid IPv4 address. // 192.168.1.10 is within the range 192.168.1.0/24. // The long integer representation of 192.168.1.10 is 3232235786.","title":"Basic Usage Example"},{"location":"user-guide/color/","text":"Color Table of content Color Table of content About Requirements Available methods Constructor Setters and Getters Color Validation Luminance Calculation Hex to RGB Conversion Color Generation from Text About Utility for managing and manipulating color values in various formats, including RGB and hexadecimal. It provides functionalities for setting and getting individual color components (red, green, blue), validating color values, calculating luminance, converting between hex and RGB, and generating colors from text strings. Requirements No requirements. Available methods Constructor Allows initialization of a Color object with RGB values and a hexadecimal color code. use GuiBranco\\Pancake\\Color; // Create a new Color object $color = new Color('255', '0', '0', '#FF0000'); // Red color Setters and Getters Methods for setting and retrieving the red, green, blue, and hex color values, with validation to ensure they are within the appropriate range. $color->setRed('128'); $color->setGreen('128'); $color->setBlue('0'); echo $color->getRed(); // Outputs: 128 echo $color->getGreen(); // Outputs: 128 echo $color->getBlue(); // Outputs: 0 Color Validation Ensures that RGB values are between 0 and 255 and that hexadecimal color codes are valid. try { $color->setRed('300'); // Invalid, throws InvalidArgumentException } catch (InvalidArgumentException $e) { echo $e->getMessage(); // Outputs: 300 is not a valid color } try { $color->setHexColor('#ZZZZZZ'); // Invalid, throws InvalidArgumentException } catch (InvalidArgumentException $e) { echo $e->getMessage(); // Outputs: #ZZZZZZ is not a valid hex color } Luminance Calculation Computes the luminance of the color using the standard luminance formula for RGB values. $luminance = $color->luminanceRGB(); echo $luminance; // Outputs a value between 0 and 1 Hex to RGB Conversion Converts a hexadecimal color code to its RGB components. $color = new Color(hexColor: '#BAA355'); list($red, $green, $blue) = $color->hexToRGB(); echo \"Red: $red, Green: $green, Blue: $blue\"; // Outputs: Red: 186, Green: 163, Blue: 85 Color Generation from Text Generates a color based on a given text string, with options to specify minimum brightness and color specification. $textColor = $color->generateColorFromText('example text', 100, 10); echo $textColor->getHexColor(); // Outputs a generated hex color code,","title":"Color"},{"location":"user-guide/color/#color","text":"","title":"Color"},{"location":"user-guide/color/#table-of-content","text":"Color Table of content About Requirements Available methods Constructor Setters and Getters Color Validation Luminance Calculation Hex to RGB Conversion Color Generation from Text","title":"Table of content"},{"location":"user-guide/color/#about","text":"Utility for managing and manipulating color values in various formats, including RGB and hexadecimal. It provides functionalities for setting and getting individual color components (red, green, blue), validating color values, calculating luminance, converting between hex and RGB, and generating colors from text strings.","title":"About"},{"location":"user-guide/color/#requirements","text":"No requirements.","title":"Requirements"},{"location":"user-guide/color/#available-methods","text":"","title":"Available methods"},{"location":"user-guide/color/#constructor","text":"Allows initialization of a Color object with RGB values and a hexadecimal color code. use GuiBranco\\Pancake\\Color; // Create a new Color object $color = new Color('255', '0', '0', '#FF0000'); // Red color","title":"Constructor"},{"location":"user-guide/color/#setters-and-getters","text":"Methods for setting and retrieving the red, green, blue, and hex color values, with validation to ensure they are within the appropriate range. $color->setRed('128'); $color->setGreen('128'); $color->setBlue('0'); echo $color->getRed(); // Outputs: 128 echo $color->getGreen(); // Outputs: 128 echo $color->getBlue(); // Outputs: 0","title":"Setters and Getters"},{"location":"user-guide/color/#color-validation","text":"Ensures that RGB values are between 0 and 255 and that hexadecimal color codes are valid. try { $color->setRed('300'); // Invalid, throws InvalidArgumentException } catch (InvalidArgumentException $e) { echo $e->getMessage(); // Outputs: 300 is not a valid color } try { $color->setHexColor('#ZZZZZZ'); // Invalid, throws InvalidArgumentException } catch (InvalidArgumentException $e) { echo $e->getMessage(); // Outputs: #ZZZZZZ is not a valid hex color }","title":"Color Validation"},{"location":"user-guide/color/#luminance-calculation","text":"Computes the luminance of the color using the standard luminance formula for RGB values. $luminance = $color->luminanceRGB(); echo $luminance; // Outputs a value between 0 and 1","title":"Luminance Calculation"},{"location":"user-guide/color/#hex-to-rgb-conversion","text":"Converts a hexadecimal color code to its RGB components. $color = new Color(hexColor: '#BAA355'); list($red, $green, $blue) = $color->hexToRGB(); echo \"Red: $red, Green: $green, Blue: $blue\"; // Outputs: Red: 186, Green: 163, Blue: 85","title":"Hex to RGB Conversion"},{"location":"user-guide/color/#color-generation-from-text","text":"Generates a color based on a given text string, with options to specify minimum brightness and color specification. $textColor = $color->generateColorFromText('example text', 100, 10); echo $textColor->getHexColor(); // Outputs a generated hex color code,","title":"Color Generation from Text"},{"location":"user-guide/database/","text":"Database Table of content Database Table of content About Requirements Example usage Available methods Constructor Prepare Bind Execute Fetch FetchAll RowCount LastInsertId BeginTransaction Commit RollBack Close GetError About This class is responsible for database operations using PDO to connect to a MySQL/MariaDB server. Requirements This requires pdo and pdo_mysql to be active with your PHP settings. Example usage A simple example usage can be as following: <?php use GuiBranco\\Pancake\\Database; use GuiBranco\\Pancake\\DatabaseException; try { // Initialize the Database $db = new Database('localhost', 'mydb', 'username', 'password'); // Example Insert $db->prepare(\"INSERT INTO users (name, email) VALUES (:name, :email)\"); $db->bind(':name', 'John Doe'); $db->bind(':email', 'john@example.com'); $db->execute(); echo \"Last Insert ID: \" . $db->lastInsertId(); // Example Select $db->prepare(\"SELECT * FROM users WHERE id = :id\"); $db->bind(':id', 1); $user = $db->fetch(); print_r($user); // Example Fetch All $db->prepare(\"SELECT * FROM users\"); $users = $db->fetchAll(); print_r($users); } catch (DatabaseException $e) { echo 'Error: ' . $e->getMessage(); } Available methods Constructor The constructor establishes a connection to the database using the provided credentials and initializes the PDO object. Parameters: $host (string): Database host, e.g., localhost . $dbname (string): The name of the database. $username (string): Username for the database. $password (string): Password for the database. $charset (string, optional): Character set to use, defaults to utf8mb4 . $db = new Database('localhost', 'my-db', 'username', 'password'); Prepare Prepares a SQL query for execution. This method is necessary before binding values and executing the query. $db->prepare('SELECT * FROM users WHERE id = :id'); Bind Binds a value to a parameter in the prepared SQL statement. If the type is not provided, it is determined based on the value's type. Parameters: $param (string): The parameter to bind (e.g., :id ). $value (mixed): The value to bind to the parameter. $type (optional): The data type of the parameter (e.g., PDO::PARAM_INT ). $db->bind(':id', 1, PDO::PARAM_INT); Execute Executes the prepared SQL statement. It returns true on success or false on failure. $db->execute(); Fetch Executes the prepared statement and fetches a single row from the result set. $result = $db->fetch(); FetchAll Executes the prepared statement and fetches all rows from the result set. $results = $db->fetchAll(); RowCount Returns the number of rows affected by the last SQL statement. $count = $db->rowCount(); LastInsertId Returns the ID of the last inserted row. $lastId = $db->lastInsertId(); BeginTransaction Starts a new database transaction. $db->beginTransaction(); Commit Commits the current database transaction. $db->commit(); RollBack Rolls back the current database transaction. $db->rollBack(); Close Closes the database connection and cleans up resources. $db->close(); GetError Returns the last error message encountered by the database, or null if no errors have occurred. $error = $db->getError();","title":"Database"},{"location":"user-guide/database/#database","text":"","title":"Database"},{"location":"user-guide/database/#table-of-content","text":"Database Table of content About Requirements Example usage Available methods Constructor Prepare Bind Execute Fetch FetchAll RowCount LastInsertId BeginTransaction Commit RollBack Close GetError","title":"Table of content"},{"location":"user-guide/database/#about","text":"This class is responsible for database operations using PDO to connect to a MySQL/MariaDB server.","title":"About"},{"location":"user-guide/database/#requirements","text":"This requires pdo and pdo_mysql to be active with your PHP settings.","title":"Requirements"},{"location":"user-guide/database/#example-usage","text":"A simple example usage can be as following: <?php use GuiBranco\\Pancake\\Database; use GuiBranco\\Pancake\\DatabaseException; try { // Initialize the Database $db = new Database('localhost', 'mydb', 'username', 'password'); // Example Insert $db->prepare(\"INSERT INTO users (name, email) VALUES (:name, :email)\"); $db->bind(':name', 'John Doe'); $db->bind(':email', 'john@example.com'); $db->execute(); echo \"Last Insert ID: \" . $db->lastInsertId(); // Example Select $db->prepare(\"SELECT * FROM users WHERE id = :id\"); $db->bind(':id', 1); $user = $db->fetch(); print_r($user); // Example Fetch All $db->prepare(\"SELECT * FROM users\"); $users = $db->fetchAll(); print_r($users); } catch (DatabaseException $e) { echo 'Error: ' . $e->getMessage(); }","title":"Example usage"},{"location":"user-guide/database/#available-methods","text":"","title":"Available methods"},{"location":"user-guide/database/#constructor","text":"The constructor establishes a connection to the database using the provided credentials and initializes the PDO object. Parameters: $host (string): Database host, e.g., localhost . $dbname (string): The name of the database. $username (string): Username for the database. $password (string): Password for the database. $charset (string, optional): Character set to use, defaults to utf8mb4 . $db = new Database('localhost', 'my-db', 'username', 'password');","title":"Constructor"},{"location":"user-guide/database/#prepare","text":"Prepares a SQL query for execution. This method is necessary before binding values and executing the query. $db->prepare('SELECT * FROM users WHERE id = :id');","title":"Prepare"},{"location":"user-guide/database/#bind","text":"Binds a value to a parameter in the prepared SQL statement. If the type is not provided, it is determined based on the value's type. Parameters: $param (string): The parameter to bind (e.g., :id ). $value (mixed): The value to bind to the parameter. $type (optional): The data type of the parameter (e.g., PDO::PARAM_INT ). $db->bind(':id', 1, PDO::PARAM_INT);","title":"Bind"},{"location":"user-guide/database/#execute","text":"Executes the prepared SQL statement. It returns true on success or false on failure. $db->execute();","title":"Execute"},{"location":"user-guide/database/#fetch","text":"Executes the prepared statement and fetches a single row from the result set. $result = $db->fetch();","title":"Fetch"},{"location":"user-guide/database/#fetchall","text":"Executes the prepared statement and fetches all rows from the result set. $results = $db->fetchAll();","title":"FetchAll"},{"location":"user-guide/database/#rowcount","text":"Returns the number of rows affected by the last SQL statement. $count = $db->rowCount();","title":"RowCount"},{"location":"user-guide/database/#lastinsertid","text":"Returns the ID of the last inserted row. $lastId = $db->lastInsertId();","title":"LastInsertId"},{"location":"user-guide/database/#begintransaction","text":"Starts a new database transaction. $db->beginTransaction();","title":"BeginTransaction"},{"location":"user-guide/database/#commit","text":"Commits the current database transaction. $db->commit();","title":"Commit"},{"location":"user-guide/database/#rollback","text":"Rolls back the current database transaction. $db->rollBack();","title":"RollBack"},{"location":"user-guide/database/#close","text":"Closes the database connection and cleans up resources. $db->close();","title":"Close"},{"location":"user-guide/database/#geterror","text":"Returns the last error message encountered by the database, or null if no errors have occurred. $error = $db->getError();","title":"GetError"},{"location":"user-guide/guid-v4/","text":"GUID (v4) Table of content GUID (v4) Table of content About Requirements Available methods Empty Random About This class is responsible for generating a GUID/UUID string. Requirements No requirements. Available methods Empty Generates an empty GUID/UUID full of zeros. Example: 00000000-0000-0000-0000-000000000000 $emptyUUID = GUIDv4::empty(); Random Generates a random GUID/UUID. Example: d7263b5c-66b7-428e-8e6d-3df2ec9a92b9 $uuid = GUIDv4::random();","title":"GUID (v4)"},{"location":"user-guide/guid-v4/#guid-v4","text":"","title":"GUID (v4)"},{"location":"user-guide/guid-v4/#table-of-content","text":"GUID (v4) Table of content About Requirements Available methods Empty Random","title":"Table of content"},{"location":"user-guide/guid-v4/#about","text":"This class is responsible for generating a GUID/UUID string.","title":"About"},{"location":"user-guide/guid-v4/#requirements","text":"No requirements.","title":"Requirements"},{"location":"user-guide/guid-v4/#available-methods","text":"","title":"Available methods"},{"location":"user-guide/guid-v4/#empty","text":"Generates an empty GUID/UUID full of zeros. Example: 00000000-0000-0000-0000-000000000000 $emptyUUID = GUIDv4::empty();","title":"Empty"},{"location":"user-guide/guid-v4/#random","text":"Generates a random GUID/UUID. Example: d7263b5c-66b7-428e-8e6d-3df2ec9a92b9 $uuid = GUIDv4::random();","title":"Random"},{"location":"user-guide/health-checks/","text":"Health Checks Table of content Health Checks Table of content About Requirements Available methods Set headers Heartbeat Start End Fail Log Error Reset state Examples Simple heartbeat Measuring time Try-Catch-Finally block Run identifier (RID) About This class is responsible for making requests to the HealthChecks.io service. It uses the Request class to perform the HTTP requests. Requirements This requires lib curl to be active with your PHP settings. This also requires a token from the Health Checks services. Available methods Set headers Set the HTTP headers for the requests (useful for setting the HTTP user-agent). $headers = array(\"User-Agent: user-project/1.0\"); $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->setHeaders($headers); Heartbeat Performs an HTTP GET request to the service, logging a successful ping. $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->heartbeat(); Start Start a request and wait until a successful/failed call to measure process duration. This will do an HTTP GET request to the /start endpoint. $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->start(); End End a request, measuring the process duration. To this work properly, you should call Start before. If you call this directly without \"starting\" it prior, it will act the same way as Heartbeat . This will perform an HTTP GET request to the / endpoint. If the Fail or Error has been called, the request will be made to the /fail endpoint. $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->end(); Fail Acknowledge a failure to the /fail endpoint. $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->fail(); Log Send a POST message to the /log endpoint. $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->log('Some message that does not change currents health check state.'); Error Like the Fail method, this one will also acknowledge a failure to the /fail endpoint. The difference is that this method will make an HTTP POST request with an error message (parameter). $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->error(\"error reason for the failure\"); Reset state Reset the state of this instance so an end call will do a successful end request. $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->start(); $healthChecks->fail(); $healthChecks->resetState(); $healthChecks->end(); // this will be a call to / instead of /fail Examples Simple heartbeat A simple example: $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->heartbeat(); Measuring time Measuring the time to run the operation: $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->start(); // time-consuming operation // .... $healthChecks->end(); Try-Catch-Finally block Using a try/catch block: $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->start(); try { // time-consuming operation // .... } catch(Exception $e) { $healthChecks->error($e->getMessage()); } finally { $healthChecks->end(); } Run identifier (RID) HealthChecks.io allows you to have parallel checks for the same monitor. To handle this, they allow you to send a custom UUID/GUID as the run id To set the run id , just set a UUID as the second constructor parameter: $healthChecksA = new HealthChecks(\"your-monitor-token\", \"00000000-0000-0000-0000-000000000000\"); $healthChecksB = new HealthChecks(\"your-monitor-token\", \"00000000-0000-0000-0000-000000000001\"); $healthChecksC = new HealthChecks(\"your-monitor-token\", \"00000000-0000-0000-0000-000000000002\"); $healthChecksD = new HealthChecks(\"your-monitor-token\", \"00000000-0000-0000-0000-000000000003\");","title":"Health Checks"},{"location":"user-guide/health-checks/#health-checks","text":"","title":"Health Checks"},{"location":"user-guide/health-checks/#table-of-content","text":"Health Checks Table of content About Requirements Available methods Set headers Heartbeat Start End Fail Log Error Reset state Examples Simple heartbeat Measuring time Try-Catch-Finally block Run identifier (RID)","title":"Table of content"},{"location":"user-guide/health-checks/#about","text":"This class is responsible for making requests to the HealthChecks.io service. It uses the Request class to perform the HTTP requests.","title":"About"},{"location":"user-guide/health-checks/#requirements","text":"This requires lib curl to be active with your PHP settings. This also requires a token from the Health Checks services.","title":"Requirements"},{"location":"user-guide/health-checks/#available-methods","text":"","title":"Available methods"},{"location":"user-guide/health-checks/#set-headers","text":"Set the HTTP headers for the requests (useful for setting the HTTP user-agent). $headers = array(\"User-Agent: user-project/1.0\"); $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->setHeaders($headers);","title":"Set headers"},{"location":"user-guide/health-checks/#heartbeat","text":"Performs an HTTP GET request to the service, logging a successful ping. $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->heartbeat();","title":"Heartbeat"},{"location":"user-guide/health-checks/#start","text":"Start a request and wait until a successful/failed call to measure process duration. This will do an HTTP GET request to the /start endpoint. $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->start();","title":"Start"},{"location":"user-guide/health-checks/#end","text":"End a request, measuring the process duration. To this work properly, you should call Start before. If you call this directly without \"starting\" it prior, it will act the same way as Heartbeat . This will perform an HTTP GET request to the / endpoint. If the Fail or Error has been called, the request will be made to the /fail endpoint. $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->end();","title":"End"},{"location":"user-guide/health-checks/#fail","text":"Acknowledge a failure to the /fail endpoint. $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->fail();","title":"Fail"},{"location":"user-guide/health-checks/#log","text":"Send a POST message to the /log endpoint. $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->log('Some message that does not change currents health check state.');","title":"Log"},{"location":"user-guide/health-checks/#error","text":"Like the Fail method, this one will also acknowledge a failure to the /fail endpoint. The difference is that this method will make an HTTP POST request with an error message (parameter). $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->error(\"error reason for the failure\");","title":"Error"},{"location":"user-guide/health-checks/#reset-state","text":"Reset the state of this instance so an end call will do a successful end request. $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->start(); $healthChecks->fail(); $healthChecks->resetState(); $healthChecks->end(); // this will be a call to / instead of /fail","title":"Reset state"},{"location":"user-guide/health-checks/#examples","text":"","title":"Examples"},{"location":"user-guide/health-checks/#simple-heartbeat","text":"A simple example: $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->heartbeat();","title":"Simple heartbeat"},{"location":"user-guide/health-checks/#measuring-time","text":"Measuring the time to run the operation: $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->start(); // time-consuming operation // .... $healthChecks->end();","title":"Measuring time"},{"location":"user-guide/health-checks/#try-catch-finally-block","text":"Using a try/catch block: $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->start(); try { // time-consuming operation // .... } catch(Exception $e) { $healthChecks->error($e->getMessage()); } finally { $healthChecks->end(); }","title":"Try-Catch-Finally block"},{"location":"user-guide/health-checks/#run-identifier-rid","text":"HealthChecks.io allows you to have parallel checks for the same monitor. To handle this, they allow you to send a custom UUID/GUID as the run id To set the run id , just set a UUID as the second constructor parameter: $healthChecksA = new HealthChecks(\"your-monitor-token\", \"00000000-0000-0000-0000-000000000000\"); $healthChecksB = new HealthChecks(\"your-monitor-token\", \"00000000-0000-0000-0000-000000000001\"); $healthChecksC = new HealthChecks(\"your-monitor-token\", \"00000000-0000-0000-0000-000000000002\"); $healthChecksD = new HealthChecks(\"your-monitor-token\", \"00000000-0000-0000-0000-000000000003\");","title":"Run identifier (RID)"},{"location":"user-guide/ip-utils/","text":"Ip Utils Table of Contents Ip Utils Table of Contents About Requirements Available Methods isValidIPv4 isValidIPv6 isIPv4InRange isIPv6InRange ipToLong About The IpUtils class provides a set of utilities for validating, checking, and converting IP addresses in both IPv4 and IPv6 formats. This class is particularly useful for handling IP-related tasks such as validating addresses, verifying if an IP is within a specific CIDR range, and converting IP addresses to their long integer representation for storage or comparison. Requirements PHP 7.4 or higher Network-related extensions enabled in PHP (e.g., inet_pton ) Available Methods isValidIPv4 Validate if a given IP address is a valid IPv4 address. Parameters: string $ip : The IP address to validate. Returns: bool - true if the IP is a valid IPv4 address, false otherwise. Example: use GuiBranco\\Pancake\\IpUtils; $ip = '192.168.1.1'; if (IpUtils::isValidIPv4($ip)) { echo \"$ip is a valid IPv4 address.\"; } else { echo \"$ip is not a valid IPv4 address.\"; } // Output: 192.168.1.1 is a valid IPv4 address. isValidIPv6 Validate if a given IP address is a valid IPv6 address. Parameters: string $ip : The IP address to validate. Returns: bool - true if the IP is a valid IPv6 address, false otherwise. Example: use GuiBranco\\Pancake\\IpUtils; $ip = '2001:0db8:85a3:0000:0000:8a2e:0370:7334'; if (IpUtils::isValidIPv6($ip)) { echo \"$ip is a valid IPv6 address.\"; } else { echo \"$ip is not a valid IPv6 address.\"; } // Output: 2001:0db8:85a3:0000:0000:8a2e:0370:7334 is a valid IPv6 address. isIPv4InRange Check if a given IPv4 address is within a specified CIDR range. Parameters: string $ip : The IPv4 address to check. string $cidr : The CIDR range in the format \"subnet/mask\". Returns: bool - true if the IP address is within the range, false otherwise. Example: use GuiBranco\\Pancake\\IpUtils; $ip = '192.168.1.10'; $cidr = '192.168.1.0/24'; if (IpUtils::isIPv4InRange($ip, $cidr)) { echo \"$ip is within the range $cidr.\"; } else { echo \"$ip is not within the range $cidr.\"; } // Output: 192.168.1.10 is within the range 192.168.1.0/24. isIPv6InRange Check if a given IPv6 address is within a specified CIDR range. Parameters: string $ip : The IPv6 address to check. string $cidr : The CIDR range in the format \"subnet/mask\". Returns: bool - true if the IP address is within the range, false otherwise. Example: use GuiBranco\\Pancake\\IpUtils; $ip = '2001:0db8:85a3::8a2e:0370:7334'; $cidr = '2001:0db8:85a3::/64'; if (IpUtils::isIPv6InRange($ip, $cidr)) { echo \"$ip is within the range $cidr.\"; } else { echo \"$ip is not within the range $cidr.\"; } // Output: 2001:0db8:85a3::8a2e:0370:7334 is within the range 2001:0db8:85a3::/64. ipToLong Convert an IP address to its long integer representation. Parameters: string $ip : The IP address to convert. Returns: string|false - The long integer representation of the IP address, or false if the IP address is invalid. Example: use GuiBranco\\Pancake\\IpUtils; $ip = '192.168.1.1'; $longIp = IpUtils::ipToLong($ip); echo \"The long integer representation of $ip is $longIp.\"; // Output: The long integer representation of 192.168.1.1 is 3232235777. $ipv6 = '2001:0db8:85a3::8a2e:0370:7334'; $longIpv6 = IpUtils::ipToLong($ipv6); echo \"The long integer representation of $ipv6 is $longIpv6.\"; // Output: The long integer representation of 2001:0db8:85a3::8a2e:0370:7334 is a large integer.","title":"Ip Utils"},{"location":"user-guide/ip-utils/#ip-utils","text":"","title":"Ip Utils"},{"location":"user-guide/ip-utils/#table-of-contents","text":"Ip Utils Table of Contents About Requirements Available Methods isValidIPv4 isValidIPv6 isIPv4InRange isIPv6InRange ipToLong","title":"Table of Contents"},{"location":"user-guide/ip-utils/#about","text":"The IpUtils class provides a set of utilities for validating, checking, and converting IP addresses in both IPv4 and IPv6 formats. This class is particularly useful for handling IP-related tasks such as validating addresses, verifying if an IP is within a specific CIDR range, and converting IP addresses to their long integer representation for storage or comparison.","title":"About"},{"location":"user-guide/ip-utils/#requirements","text":"PHP 7.4 or higher Network-related extensions enabled in PHP (e.g., inet_pton )","title":"Requirements"},{"location":"user-guide/ip-utils/#available-methods","text":"","title":"Available Methods"},{"location":"user-guide/ip-utils/#isvalidipv4","text":"Validate if a given IP address is a valid IPv4 address. Parameters: string $ip : The IP address to validate. Returns: bool - true if the IP is a valid IPv4 address, false otherwise. Example: use GuiBranco\\Pancake\\IpUtils; $ip = '192.168.1.1'; if (IpUtils::isValidIPv4($ip)) { echo \"$ip is a valid IPv4 address.\"; } else { echo \"$ip is not a valid IPv4 address.\"; } // Output: 192.168.1.1 is a valid IPv4 address.","title":"isValidIPv4"},{"location":"user-guide/ip-utils/#isvalidipv6","text":"Validate if a given IP address is a valid IPv6 address. Parameters: string $ip : The IP address to validate. Returns: bool - true if the IP is a valid IPv6 address, false otherwise. Example: use GuiBranco\\Pancake\\IpUtils; $ip = '2001:0db8:85a3:0000:0000:8a2e:0370:7334'; if (IpUtils::isValidIPv6($ip)) { echo \"$ip is a valid IPv6 address.\"; } else { echo \"$ip is not a valid IPv6 address.\"; } // Output: 2001:0db8:85a3:0000:0000:8a2e:0370:7334 is a valid IPv6 address.","title":"isValidIPv6"},{"location":"user-guide/ip-utils/#isipv4inrange","text":"Check if a given IPv4 address is within a specified CIDR range. Parameters: string $ip : The IPv4 address to check. string $cidr : The CIDR range in the format \"subnet/mask\". Returns: bool - true if the IP address is within the range, false otherwise. Example: use GuiBranco\\Pancake\\IpUtils; $ip = '192.168.1.10'; $cidr = '192.168.1.0/24'; if (IpUtils::isIPv4InRange($ip, $cidr)) { echo \"$ip is within the range $cidr.\"; } else { echo \"$ip is not within the range $cidr.\"; } // Output: 192.168.1.10 is within the range 192.168.1.0/24.","title":"isIPv4InRange"},{"location":"user-guide/ip-utils/#isipv6inrange","text":"Check if a given IPv6 address is within a specified CIDR range. Parameters: string $ip : The IPv6 address to check. string $cidr : The CIDR range in the format \"subnet/mask\". Returns: bool - true if the IP address is within the range, false otherwise. Example: use GuiBranco\\Pancake\\IpUtils; $ip = '2001:0db8:85a3::8a2e:0370:7334'; $cidr = '2001:0db8:85a3::/64'; if (IpUtils::isIPv6InRange($ip, $cidr)) { echo \"$ip is within the range $cidr.\"; } else { echo \"$ip is not within the range $cidr.\"; } // Output: 2001:0db8:85a3::8a2e:0370:7334 is within the range 2001:0db8:85a3::/64.","title":"isIPv6InRange"},{"location":"user-guide/ip-utils/#iptolong","text":"Convert an IP address to its long integer representation. Parameters: string $ip : The IP address to convert. Returns: string|false - The long integer representation of the IP address, or false if the IP address is invalid. Example: use GuiBranco\\Pancake\\IpUtils; $ip = '192.168.1.1'; $longIp = IpUtils::ipToLong($ip); echo \"The long integer representation of $ip is $longIp.\"; // Output: The long integer representation of 192.168.1.1 is 3232235777. $ipv6 = '2001:0db8:85a3::8a2e:0370:7334'; $longIpv6 = IpUtils::ipToLong($ipv6); echo \"The long integer representation of $ipv6 is $longIpv6.\"; // Output: The long integer representation of 2001:0db8:85a3::8a2e:0370:7334 is a large integer.","title":"ipToLong"},{"location":"user-guide/logger/","text":"Logger Table of content Logger Table of content About Requirements Available methods Log Remarks About This class send detailed information about the caller method to a endpoint that expects a predefined JSON structure. It uses Requet class to perform HTTP requests. Requirements This requires lib curl to be active with your PHP settings. This also requires a key/token pair from the logger services. Available methods Log Send the log with a custom message (string) and details (anything) to the log-message endpoint. $logger = new Logger(\"https://logger-service.endpoint.com/api/v1/\", \"key\", \"token\"); $logger->log(\"Sample message\", array(\"test\"=>\"test\", \"foo\"=>\"bar\")); $logger->log(\"Another message\", \"Details as string\"); Remarks This class is intended to be used by my own and internal services, to my own logger service. This is usefull just to centralize my logs without any market software (SEQ, Kibana, GrayLog, New Relic, etc)","title":"Logger"},{"location":"user-guide/logger/#logger","text":"","title":"Logger"},{"location":"user-guide/logger/#table-of-content","text":"Logger Table of content About Requirements Available methods Log Remarks","title":"Table of content"},{"location":"user-guide/logger/#about","text":"This class send detailed information about the caller method to a endpoint that expects a predefined JSON structure. It uses Requet class to perform HTTP requests.","title":"About"},{"location":"user-guide/logger/#requirements","text":"This requires lib curl to be active with your PHP settings. This also requires a key/token pair from the logger services.","title":"Requirements"},{"location":"user-guide/logger/#available-methods","text":"","title":"Available methods"},{"location":"user-guide/logger/#log","text":"Send the log with a custom message (string) and details (anything) to the log-message endpoint. $logger = new Logger(\"https://logger-service.endpoint.com/api/v1/\", \"key\", \"token\"); $logger->log(\"Sample message\", array(\"test\"=>\"test\", \"foo\"=>\"bar\")); $logger->log(\"Another message\", \"Details as string\");","title":"Log"},{"location":"user-guide/logger/#remarks","text":"This class is intended to be used by my own and internal services, to my own logger service. This is usefull just to centralize my logs without any market software (SEQ, Kibana, GrayLog, New Relic, etc)","title":"Remarks"},{"location":"user-guide/memory-cache/","text":"Memory Cache Table of content Memory Cache Table of content About Requirements Available methods openMemory writeJsonInMemory readJsonInMemory Usage Testing About The MemoryCache class provides a mechanism for caching data in shared memory using PHP's shmop functions. This is useful for performance optimization by reducing the need to repeatedly fetch data from slower storage mediums. Requirements This requires shmop to be active with your PHP settings. Available methods openMemory Opens a shared memory block and returns the memory identifier. writeJsonInMemory Writes JSON-encoded data to the shared memory. readJsonInMemory Reads data from the shared memory and decodes it from JSON. Usage $cache = new MemoryCache(); $data = ['key' => 'value']; $cache->writeJsonInMemory($data); $retrievedData = $cache->readJsonInMemory(); Testing Unit tests for the MemoryCache class are available in the tests/MemoryCacheTest.php file.","title":"Memory Cache"},{"location":"user-guide/memory-cache/#memory-cache","text":"","title":"Memory Cache"},{"location":"user-guide/memory-cache/#table-of-content","text":"Memory Cache Table of content About Requirements Available methods openMemory writeJsonInMemory readJsonInMemory Usage Testing","title":"Table of content"},{"location":"user-guide/memory-cache/#about","text":"The MemoryCache class provides a mechanism for caching data in shared memory using PHP's shmop functions. This is useful for performance optimization by reducing the need to repeatedly fetch data from slower storage mediums.","title":"About"},{"location":"user-guide/memory-cache/#requirements","text":"This requires shmop to be active with your PHP settings.","title":"Requirements"},{"location":"user-guide/memory-cache/#available-methods","text":"","title":"Available methods"},{"location":"user-guide/memory-cache/#openmemory","text":"Opens a shared memory block and returns the memory identifier.","title":"openMemory"},{"location":"user-guide/memory-cache/#writejsoninmemory","text":"Writes JSON-encoded data to the shared memory.","title":"writeJsonInMemory"},{"location":"user-guide/memory-cache/#readjsoninmemory","text":"Reads data from the shared memory and decodes it from JSON.","title":"readJsonInMemory"},{"location":"user-guide/memory-cache/#usage","text":"$cache = new MemoryCache(); $data = ['key' => 'value']; $cache->writeJsonInMemory($data); $retrievedData = $cache->readJsonInMemory();","title":"Usage"},{"location":"user-guide/memory-cache/#testing","text":"Unit tests for the MemoryCache class are available in the tests/MemoryCacheTest.php file.","title":"Testing"},{"location":"user-guide/one-signal/","text":"One Signal Table of content One Signal Table of content About Requirements Available methods Send notification About This class allows you to send One Signal notifications. It uses the Request class to perform HTTP requests. Requirements This requires lib curl to be active with your PHP settings. This also requires a token from One Signal services. Available methods Send notification Send a push notification using the One Signal V1 API endpoint. $oneSignal = new OneSignal(\"your-OneSignal-api-token\"); $oneSignalAppId = \"00000000-0000-0000-8000-000000000000\"; $heading = \"My push notification\"; $content = \"Hi!\\n\\nSome content of the notification\"; $fields = array( 'app_id' => $oneSignalAppId, 'included_segments' => array('All'), 'headings' => array('en' => $heading), 'contents' => array('en' => $content), 'web_push_topic' => 'unique-topic-identification', 'chrome_web_icon' => 'https://example.com/images/logo.png' ); $oneSignal->sendNotification($fields);","title":"One Signal"},{"location":"user-guide/one-signal/#one-signal","text":"","title":"One Signal"},{"location":"user-guide/one-signal/#table-of-content","text":"One Signal Table of content About Requirements Available methods Send notification","title":"Table of content"},{"location":"user-guide/one-signal/#about","text":"This class allows you to send One Signal notifications. It uses the Request class to perform HTTP requests.","title":"About"},{"location":"user-guide/one-signal/#requirements","text":"This requires lib curl to be active with your PHP settings. This also requires a token from One Signal services.","title":"Requirements"},{"location":"user-guide/one-signal/#available-methods","text":"","title":"Available methods"},{"location":"user-guide/one-signal/#send-notification","text":"Send a push notification using the One Signal V1 API endpoint. $oneSignal = new OneSignal(\"your-OneSignal-api-token\"); $oneSignalAppId = \"00000000-0000-0000-8000-000000000000\"; $heading = \"My push notification\"; $content = \"Hi!\\n\\nSome content of the notification\"; $fields = array( 'app_id' => $oneSignalAppId, 'included_segments' => array('All'), 'headings' => array('en' => $heading), 'contents' => array('en' => $content), 'web_push_topic' => 'unique-topic-identification', 'chrome_web_icon' => 'https://example.com/images/logo.png' ); $oneSignal->sendNotification($fields);","title":"Send notification"},{"location":"user-guide/request/","text":"Request Table of content Request Table of content About Requirements Base URL Configuration Available HTTP verbs Get Post Post without payload Post with payload Put Put without payload Put with payload Patch Patch without payload Patch with payload Delete Delete without payload Delete with payload Options Head Batch requests Executing batch requests Troubleshooting About This class is responsible for executing HTTP requests using cURL with support for custom headers. Responses are encapsulated in the Response class, providing properties like statusCode , headers , and body for better usability. The Request class uses dependency injection for the ResponseFactory to create Response objects, making it more testable and adhering to SOLID principles. Requirements This requires lib curl to be active with your PHP settings. You can install it via: # For Debian/Ubuntu sudo apt-get install php-curl # For CentOS/RHEL sudo yum install php-curl Minimum requirements: PHP >= 7.4 lib curl >= 7.29.0 For more information, see the PHP cURL documentation . Base URL Configuration The Request class now supports setting a base URL for all requests. This is useful when making multiple requests to the same API endpoint. Setting a base URL in the constructor // Create a request with a base URL $request = new Request('https://api.example.com'); // Or with a custom ResponseFactory $request = new Request('https://api.example.com', new CustomResponseFactory()); // Now you can make requests using relative paths $response = $request->get('/users'); // This will request https://api.example.com/users Setting a base URL after instantiation $request = new Request(); $request->setBaseUrl('https://api.example.com'); // Now you can make requests using relative paths $response = $request->get('/users'); // This will request https://api.example.com/users Getting the current base URL $request = new Request('https://api.example.com'); $baseUrl = $request->getBaseUrl(); // Returns 'https://api.example.com' Using absolute URLs with a base URL set If you provide an absolute URL (starting with http:// or https://), the base URL will be ignored: $request = new Request('https://api.example.com'); // This will still request https://another-api.com/data $response = $request->get('https://another-api.com/data'); Available HTTP verbs Get Performs HTTP GET requests with custom headers. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $request = new Request(); $response = $request->get(\"https://example.com/\", $headers); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->body; } Post Post without payload Performs HTTP POST requests with custom headers. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $request = new Request(); $response = $request->post(\"https://example.com/\", $headers); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->body; } Post with payload Performs HTTP POST requests with custom headers and a payload. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $payload = array(\"some\" => \"thing\"); $request = new Request(); $response = $request->post(\"https://example.com/\", $headers, json_encode($payload)); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->body; } Put Put without payload Performs HTTP PUT requests with custom headers. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $request = new Request(); $response = $request->put(\"https://example.com/\", $headers); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->body; } Put with payload Performs HTTP PUT requests with custom headers and a payload. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $payload = array(\"some\" => \"thing\"); $request = new Request(); $response = $request->put(\"https://example.com/\", $headers, json_encode($payload)); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->body; } Patch Patch without payload Performs HTTP PATCH requests with custom headers. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $request = new Request(); $response = $request->patch(\"https://example.com/\", $headers); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->body; } Patch with payload Performs HTTP PATCH requests with custom headers and a payload. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $payload = array(\"some\" => \"thing\"); $request = new Request(); $response = $request->patch(\"https://example.com/\", $headers, json_encode($payload)); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->body; } Delete Delete without payload Performs HTTP DELETE requests with custom headers. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $request = new Request(); $response = $request->delete(\"https://example.com/\", $headers); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->statusCode; } Delete with payload Performs HTTP DELETE requests with custom headers and a payload. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $payload = array(\"some\" => \"thing\"); $request = new Request(); $response = $request->delete(\"https://example.com/\", $headers, json_encode($payload)); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->statusCode; } Options Performs HTTP OPTIONS requests with custom headers. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $request = new Request(); $response = $request->options(\"https://example.com/\", $headers); if ($response->statusCode >= 200 && $response->statusCode < 300) { foreach ($response->headers as $header) { echo $header; } } Head Performs HTTP HEAD requests with custom headers. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $request = new Request(); $response = $request->head(\"https://example.com/\", $headers); if ($response->statusCode >= 200 && $response->statusCode < 300) { foreach ($response->headers as $header) { echo $header; } } Batch requests Executing batch requests The Request class supports batch requests through the addRequest and executeBatch methods. This allows for the execution of multiple HTTP requests in parallel using curl_multi_init , reducing the total execution time for large batches. Example usage $batchRequests = [ [ 'method' => 'GET', 'key' => 'request1', 'url' => 'https://example.com/api/users', 'headers' => [\"Accept: application/json\"] ], [ 'method' => 'POST', 'key' => 'request2', 'url' => 'https://example.com/api/posts', 'headers' => [\"Content-Type: application/json\"], 'payload' => json_encode(['key' => 'value']) ] ]; $request = new Request(); $request->addRequest('request1', 'https://example.com/api/users', [\"Accept: application/json\"]); $request->addRequest('request2', 'https://example.com/api/posts', [\"Content-Type: application/json\"], 'POST', json_encode(['key' => 'value'])); $responses = $request->executeBatch(); Parameters for batch requests Each batch request requires the following structure: method (required) : The HTTP method to use (e.g., GET, POST, PUT, PATCH, DELETE). url (required) : The full URL for the request. headers (optional) : An array of HTTP headers. payload (optional) : The request body, applicable for POST, PUT, PATCH, and DELETE methods. Notes Concurrency Limit : The executeBatch method processes up to 10 requests concurrently (as defined by MAX_CONCURRENT_REQUESTS in the Request.php file). Error Handling : If a request fails, its corresponding Response object will contain error details (e.g., statusCode: -1 and an error message in getMessage() ). Response Object : Each response is wrapped in the Response class, providing structured access to the statusCode , body , and headers . Troubleshooting If the request could not be completed for some reason, the result status code will be -1 , and an error property will be set with the content of the curl_error response. $request = new Request(); $response = $request->get(\"https://invalid-domain\"); if ($response->statusCode === -1) { echo $response->error; // This is only populated when the status code equals to -1. }","title":"Request"},{"location":"user-guide/request/#request","text":"","title":"Request"},{"location":"user-guide/request/#table-of-content","text":"Request Table of content About Requirements Base URL Configuration Available HTTP verbs Get Post Post without payload Post with payload Put Put without payload Put with payload Patch Patch without payload Patch with payload Delete Delete without payload Delete with payload Options Head Batch requests Executing batch requests Troubleshooting","title":"Table of content"},{"location":"user-guide/request/#about","text":"This class is responsible for executing HTTP requests using cURL with support for custom headers. Responses are encapsulated in the Response class, providing properties like statusCode , headers , and body for better usability. The Request class uses dependency injection for the ResponseFactory to create Response objects, making it more testable and adhering to SOLID principles.","title":"About"},{"location":"user-guide/request/#requirements","text":"This requires lib curl to be active with your PHP settings. You can install it via: # For Debian/Ubuntu sudo apt-get install php-curl # For CentOS/RHEL sudo yum install php-curl Minimum requirements: PHP >= 7.4 lib curl >= 7.29.0 For more information, see the PHP cURL documentation .","title":"Requirements"},{"location":"user-guide/request/#base-url-configuration","text":"The Request class now supports setting a base URL for all requests. This is useful when making multiple requests to the same API endpoint.","title":"Base URL Configuration"},{"location":"user-guide/request/#setting-a-base-url-in-the-constructor","text":"// Create a request with a base URL $request = new Request('https://api.example.com'); // Or with a custom ResponseFactory $request = new Request('https://api.example.com', new CustomResponseFactory()); // Now you can make requests using relative paths $response = $request->get('/users'); // This will request https://api.example.com/users","title":"Setting a base URL in the constructor"},{"location":"user-guide/request/#setting-a-base-url-after-instantiation","text":"$request = new Request(); $request->setBaseUrl('https://api.example.com'); // Now you can make requests using relative paths $response = $request->get('/users'); // This will request https://api.example.com/users","title":"Setting a base URL after instantiation"},{"location":"user-guide/request/#getting-the-current-base-url","text":"$request = new Request('https://api.example.com'); $baseUrl = $request->getBaseUrl(); // Returns 'https://api.example.com'","title":"Getting the current base URL"},{"location":"user-guide/request/#using-absolute-urls-with-a-base-url-set","text":"If you provide an absolute URL (starting with http:// or https://), the base URL will be ignored: $request = new Request('https://api.example.com'); // This will still request https://another-api.com/data $response = $request->get('https://another-api.com/data');","title":"Using absolute URLs with a base URL set"},{"location":"user-guide/request/#available-http-verbs","text":"","title":"Available HTTP verbs"},{"location":"user-guide/request/#get","text":"Performs HTTP GET requests with custom headers. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $request = new Request(); $response = $request->get(\"https://example.com/\", $headers); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->body; }","title":"Get"},{"location":"user-guide/request/#post","text":"","title":"Post"},{"location":"user-guide/request/#post-without-payload","text":"Performs HTTP POST requests with custom headers. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $request = new Request(); $response = $request->post(\"https://example.com/\", $headers); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->body; }","title":"Post without payload"},{"location":"user-guide/request/#post-with-payload","text":"Performs HTTP POST requests with custom headers and a payload. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $payload = array(\"some\" => \"thing\"); $request = new Request(); $response = $request->post(\"https://example.com/\", $headers, json_encode($payload)); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->body; }","title":"Post with payload"},{"location":"user-guide/request/#put","text":"","title":"Put"},{"location":"user-guide/request/#put-without-payload","text":"Performs HTTP PUT requests with custom headers. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $request = new Request(); $response = $request->put(\"https://example.com/\", $headers); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->body; }","title":"Put without payload"},{"location":"user-guide/request/#put-with-payload","text":"Performs HTTP PUT requests with custom headers and a payload. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $payload = array(\"some\" => \"thing\"); $request = new Request(); $response = $request->put(\"https://example.com/\", $headers, json_encode($payload)); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->body; }","title":"Put with payload"},{"location":"user-guide/request/#patch","text":"","title":"Patch"},{"location":"user-guide/request/#patch-without-payload","text":"Performs HTTP PATCH requests with custom headers. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $request = new Request(); $response = $request->patch(\"https://example.com/\", $headers); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->body; }","title":"Patch without payload"},{"location":"user-guide/request/#patch-with-payload","text":"Performs HTTP PATCH requests with custom headers and a payload. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $payload = array(\"some\" => \"thing\"); $request = new Request(); $response = $request->patch(\"https://example.com/\", $headers, json_encode($payload)); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->body; }","title":"Patch with payload"},{"location":"user-guide/request/#delete","text":"","title":"Delete"},{"location":"user-guide/request/#delete-without-payload","text":"Performs HTTP DELETE requests with custom headers. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $request = new Request(); $response = $request->delete(\"https://example.com/\", $headers); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->statusCode; }","title":"Delete without payload"},{"location":"user-guide/request/#delete-with-payload","text":"Performs HTTP DELETE requests with custom headers and a payload. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $payload = array(\"some\" => \"thing\"); $request = new Request(); $response = $request->delete(\"https://example.com/\", $headers, json_encode($payload)); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->statusCode; }","title":"Delete with payload"},{"location":"user-guide/request/#options","text":"Performs HTTP OPTIONS requests with custom headers. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $request = new Request(); $response = $request->options(\"https://example.com/\", $headers); if ($response->statusCode >= 200 && $response->statusCode < 300) { foreach ($response->headers as $header) { echo $header; } }","title":"Options"},{"location":"user-guide/request/#head","text":"Performs HTTP HEAD requests with custom headers. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $request = new Request(); $response = $request->head(\"https://example.com/\", $headers); if ($response->statusCode >= 200 && $response->statusCode < 300) { foreach ($response->headers as $header) { echo $header; } }","title":"Head"},{"location":"user-guide/request/#batch-requests","text":"","title":"Batch requests"},{"location":"user-guide/request/#executing-batch-requests","text":"The Request class supports batch requests through the addRequest and executeBatch methods. This allows for the execution of multiple HTTP requests in parallel using curl_multi_init , reducing the total execution time for large batches.","title":"Executing batch requests"},{"location":"user-guide/request/#example-usage","text":"$batchRequests = [ [ 'method' => 'GET', 'key' => 'request1', 'url' => 'https://example.com/api/users', 'headers' => [\"Accept: application/json\"] ], [ 'method' => 'POST', 'key' => 'request2', 'url' => 'https://example.com/api/posts', 'headers' => [\"Content-Type: application/json\"], 'payload' => json_encode(['key' => 'value']) ] ]; $request = new Request(); $request->addRequest('request1', 'https://example.com/api/users', [\"Accept: application/json\"]); $request->addRequest('request2', 'https://example.com/api/posts', [\"Content-Type: application/json\"], 'POST', json_encode(['key' => 'value'])); $responses = $request->executeBatch();","title":"Example usage"},{"location":"user-guide/request/#parameters-for-batch-requests","text":"Each batch request requires the following structure: method (required) : The HTTP method to use (e.g., GET, POST, PUT, PATCH, DELETE). url (required) : The full URL for the request. headers (optional) : An array of HTTP headers. payload (optional) : The request body, applicable for POST, PUT, PATCH, and DELETE methods.","title":"Parameters for batch requests"},{"location":"user-guide/request/#notes","text":"Concurrency Limit : The executeBatch method processes up to 10 requests concurrently (as defined by MAX_CONCURRENT_REQUESTS in the Request.php file). Error Handling : If a request fails, its corresponding Response object will contain error details (e.g., statusCode: -1 and an error message in getMessage() ). Response Object : Each response is wrapped in the Response class, providing structured access to the statusCode , body , and headers .","title":"Notes"},{"location":"user-guide/request/#troubleshooting","text":"If the request could not be completed for some reason, the result status code will be -1 , and an error property will be set with the content of the curl_error response. $request = new Request(); $response = $request->get(\"https://invalid-domain\"); if ($response->statusCode === -1) { echo $response->error; // This is only populated when the status code equals to -1. }","title":"Troubleshooting"},{"location":"user-guide/session-manager/","text":"Session Manager Table of Contents Session Manager Table of Contents About Requirements Available Methods Start Set Get Has Remove Destroy Regenerate Flash Get Flash Set Expiration About The SessionManager class is a utility class for managing PHP sessions. It provides a simplified interface for starting sessions, setting and retrieving session data, managing flash messages, handling session expiration, and regenerating session IDs. It abstracts away some of the complexities of native PHP session management, ensuring smoother operations, error handling, and better session control. This class is ideal for applications where session management is crucial but should remain simple and maintainable. Requirements To use the SessionManager class, the following requirements must be met: PHP Version : 8.3 or later Session Handling : The class relies on PHP's built-in session handling. Ensure session support is enabled in your PHP configuration. Exception Handling : The class makes use of custom exceptions ( SessionException ). This requires proper error handling in your application. Available Methods Start Starts a session if no session is currently active. It checks if headers have already been sent and throws a SessionException if session initialization fails. use GuiBranco\\Pancake\\SessionManager; SessionManager::start(); Set Stores a value in the session under the specified key. This method ensures that a session is started before saving the value. use GuiBranco\\Pancake\\SessionManager; SessionManager::set('user_id', 12345); Get Retrieves the value associated with a given key from the session. If the key is not found, it returns the default value. use GuiBranco\\Pancake\\SessionManager; $userId = SessionManager::get('user_id', 'guest'); Has Checks if a key exists in the session. Returns true if the key is present, false otherwise. use GuiBranco\\Pancake\\SessionManager; if (SessionManager::has('user_id')) { // Key exists } Remove Removes a key from the session. If the key is not present, nothing happens. use GuiBranco\\Pancake\\SessionManager; SessionManager::remove('user_id'); Destroy Destroys the current session and removes all session data. If session cookies are enabled, they will also be cleared. use GuiBranco\\Pancake\\SessionManager; SessionManager::destroy(); Regenerate Regenerates the session ID to prevent session fixation attacks. This method does nothing if no session is active. use GuiBranco\\Pancake\\SessionManager; SessionManager::regenerate(); Flash Stores a flash message in the session. Flash messages are meant to persist only for the next request and are automatically removed after being retrieved. use GuiBranco\\Pancake\\SessionManager; SessionManager::flash('status', 'Operation successful'); Get Flash Retrieves a flash message from the session. Once retrieved, the flash message is automatically deleted. If the key doesn't exist, it returns the default value. use GuiBranco\\Pancake\\SessionManager; $statusMessage = SessionManager::getFlash('status', 'No status message found'); Set Expiration Sets a session expiration time. If the session's last activity exceeds the specified lifetime, the session is destroyed and restarted. use GuiBranco\\Pancake\\SessionManager; SessionManager::setExpiration(3600); // 1 hour expiration","title":"Session Manager"},{"location":"user-guide/session-manager/#session-manager","text":"","title":"Session Manager"},{"location":"user-guide/session-manager/#table-of-contents","text":"Session Manager Table of Contents About Requirements Available Methods Start Set Get Has Remove Destroy Regenerate Flash Get Flash Set Expiration","title":"Table of Contents"},{"location":"user-guide/session-manager/#about","text":"The SessionManager class is a utility class for managing PHP sessions. It provides a simplified interface for starting sessions, setting and retrieving session data, managing flash messages, handling session expiration, and regenerating session IDs. It abstracts away some of the complexities of native PHP session management, ensuring smoother operations, error handling, and better session control. This class is ideal for applications where session management is crucial but should remain simple and maintainable.","title":"About"},{"location":"user-guide/session-manager/#requirements","text":"To use the SessionManager class, the following requirements must be met: PHP Version : 8.3 or later Session Handling : The class relies on PHP's built-in session handling. Ensure session support is enabled in your PHP configuration. Exception Handling : The class makes use of custom exceptions ( SessionException ). This requires proper error handling in your application.","title":"Requirements"},{"location":"user-guide/session-manager/#available-methods","text":"","title":"Available Methods"},{"location":"user-guide/session-manager/#start","text":"Starts a session if no session is currently active. It checks if headers have already been sent and throws a SessionException if session initialization fails. use GuiBranco\\Pancake\\SessionManager; SessionManager::start();","title":"Start"},{"location":"user-guide/session-manager/#set","text":"Stores a value in the session under the specified key. This method ensures that a session is started before saving the value. use GuiBranco\\Pancake\\SessionManager; SessionManager::set('user_id', 12345);","title":"Set"},{"location":"user-guide/session-manager/#get","text":"Retrieves the value associated with a given key from the session. If the key is not found, it returns the default value. use GuiBranco\\Pancake\\SessionManager; $userId = SessionManager::get('user_id', 'guest');","title":"Get"},{"location":"user-guide/session-manager/#has","text":"Checks if a key exists in the session. Returns true if the key is present, false otherwise. use GuiBranco\\Pancake\\SessionManager; if (SessionManager::has('user_id')) { // Key exists }","title":"Has"},{"location":"user-guide/session-manager/#remove","text":"Removes a key from the session. If the key is not present, nothing happens. use GuiBranco\\Pancake\\SessionManager; SessionManager::remove('user_id');","title":"Remove"},{"location":"user-guide/session-manager/#destroy","text":"Destroys the current session and removes all session data. If session cookies are enabled, they will also be cleared. use GuiBranco\\Pancake\\SessionManager; SessionManager::destroy();","title":"Destroy"},{"location":"user-guide/session-manager/#regenerate","text":"Regenerates the session ID to prevent session fixation attacks. This method does nothing if no session is active. use GuiBranco\\Pancake\\SessionManager; SessionManager::regenerate();","title":"Regenerate"},{"location":"user-guide/session-manager/#flash","text":"Stores a flash message in the session. Flash messages are meant to persist only for the next request and are automatically removed after being retrieved. use GuiBranco\\Pancake\\SessionManager; SessionManager::flash('status', 'Operation successful');","title":"Flash"},{"location":"user-guide/session-manager/#get-flash","text":"Retrieves a flash message from the session. Once retrieved, the flash message is automatically deleted. If the key doesn't exist, it returns the default value. use GuiBranco\\Pancake\\SessionManager; $statusMessage = SessionManager::getFlash('status', 'No status message found');","title":"Get Flash"},{"location":"user-guide/session-manager/#set-expiration","text":"Sets a session expiration time. If the session's last activity exceeds the specified lifetime, the session is destroyed and restarted. use GuiBranco\\Pancake\\SessionManager; SessionManager::setExpiration(3600); // 1 hour expiration","title":"Set Expiration"},{"location":"user-guide/shieldsio/","text":"ShieldsIo Table of content ShieldsIo Table of content About Requirements Available methods Generate badge URL About This class is a helper to generate ShieldsIo badges. It builds the URL with basic personalization. Requirements No requirements. Available methods Generate badge URL Generates the badge URL. $shieldsIo = new ShieldsIo(); // Generates a flat GitHub badge with owner/repo text. $url = $shieldsIo->generateBadgeUrl(null, 'owner/repo', 'black', 'flat', null, 'github'); echo $url; // Outputs: https://img.shields.io/badge/owner%2Frepo-black?style=flat&logo=github // Generates a social GitHub badge with owner text. $url = $shieldsIo->generateBadgeUrl(null, 'owner', 'black', 'social', null, 'github'); echo $url; // Outputs: https://img.shields.io/badge/owner-black?style=social&logo=github","title":"ShieldsIo"},{"location":"user-guide/shieldsio/#shieldsio","text":"","title":"ShieldsIo"},{"location":"user-guide/shieldsio/#table-of-content","text":"ShieldsIo Table of content About Requirements Available methods Generate badge URL","title":"Table of content"},{"location":"user-guide/shieldsio/#about","text":"This class is a helper to generate ShieldsIo badges. It builds the URL with basic personalization.","title":"About"},{"location":"user-guide/shieldsio/#requirements","text":"No requirements.","title":"Requirements"},{"location":"user-guide/shieldsio/#available-methods","text":"","title":"Available methods"},{"location":"user-guide/shieldsio/#generate-badge-url","text":"Generates the badge URL. $shieldsIo = new ShieldsIo(); // Generates a flat GitHub badge with owner/repo text. $url = $shieldsIo->generateBadgeUrl(null, 'owner/repo', 'black', 'flat', null, 'github'); echo $url; // Outputs: https://img.shields.io/badge/owner%2Frepo-black?style=flat&logo=github // Generates a social GitHub badge with owner text. $url = $shieldsIo->generateBadgeUrl(null, 'owner', 'black', 'social', null, 'github'); echo $url; // Outputs: https://img.shields.io/badge/owner-black?style=social&logo=github","title":"Generate badge URL"}]}