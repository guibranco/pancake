name: Sonar Cloud

on:
    push:
        branches:
            - main
    pull_request:
    workflow_dispatch:

jobs:
    sonarcloud:
        name: SonarCloud
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.pull_request.head.sha }}
                  fetch-depth: 0

            # - name: ☕ Set up Java 
            #   uses: actions/setup-java@v4
            #   with:
            #     distribution: 'temurin'
            #     java-version: '21'
              
            - name: Cache Composer dependencies
              uses: actions/cache@v4
              with:
                  path: /tmp/composer-cache
                  key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

            - name: Install dependencies
              uses: php-actions/composer@v6

            - name: Docker compose up
              run: docker compose up -d 

            - name: Wait for services to be healthy
              run: |
                set -e
            
                MAX_WAIT_SECONDS=300  # 5 minutes max total wait
                SLEEP_INTERVAL=5
                START_TIME=$(date +%s)
            
                wait_for_health() {
                  local container="$1"
                  local retries=0
            
                  echo "⏳ Waiting for '$container' to become healthy..."
            
                  while true; do
                    STATUS=$(docker inspect --format='{{.State.Health.Status}}' "$container" 2>/dev/null || echo "not-found")
            
                    if [ "$STATUS" = "healthy" ]; then
                      echo "✅ $container is healthy!"
                      break
                    elif [ "$STATUS" = "unhealthy" ]; then
                      echo "❌ $container is unhealthy."
                      exit 1
                    elif [ "$STATUS" = "not-found" ]; then
                      echo "⚠️ $container not found. Retrying..."
                    else
                      echo "⌛ $container status: $STATUS. Waiting..."
                    fi
            
                    CURRENT_TIME=$(date +%s)
                    ELAPSED=$((CURRENT_TIME - START_TIME))
            
                    if [ "$ELAPSED" -ge "$MAX_WAIT_SECONDS" ]; then
                      echo "⏰ Timeout reached for $container after $ELAPSED seconds!"
                      exit 1
                    fi
            
                    sleep "$SLEEP_INTERVAL"
                  done
                }
            
                wait_for_health database
                wait_for_health wiremock


            - name: Check if WireMock is available
              run: php tests/check-wiremock.php

            - name: PHPUnit Tests
              uses: php-actions/phpunit@v4
              with:
                  version: 11
                  php_version: 8.3
                  php_extensions: xdebug shmop curl pdo pdo_mysql
                  coverage_clover: coverage.xml
                  bootstrap: vendor/autoload.php
                  log_junit: execution.xml
                  configuration: tests/phpunit.xml
                  test_suffix: Test.php
                  args: --coverage-filter src tests
              env:
                  XDEBUG_MODE: coverage

            - name: Fix code coverage paths
              run: |
                  sed -i 's@'$GITHUB_WORKSPACE'@/github/workspace/@g' coverage.xml
                  sed -i 's@'$GITHUB_WORKSPACE'@/github/workspace/@g' execution.xml

            - name: SonarQube Scan
              uses: SonarSource/sonarqube-scan-action@v5.1.0
              env:
                SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
                SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
